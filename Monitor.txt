package oop_Lecture;
	
	import java.io.FileWriter;
	import java.io.IOException;
	import java.util.LinkedList;
	import java.util.Queue;
	import java.util.Random;

	class Buffer {
	    private final int capacity = 100;
	    private final Queue<Integer> buffer = new LinkedList<>();

	    // Producer adds data to the buffer
	    public synchronized void produce(int data) {
	        while (buffer.size() == capacity) {
	            try {
	                wait(); // Wait if buffer is full
	            } catch (InterruptedException e) {
	                Thread.currentThread().interrupt();
	            }
	        }
	        buffer.add(data);
	        notifyAll(); // Notify waiting consumers that data is available
	    }

	    // Consumer fetches data from the buffer
	    public synchronized int consume() {
	        while (buffer.isEmpty()) {
	            try {
	                wait(); // Wait if buffer is empty
	            } catch (InterruptedException e) {
	                Thread.currentThread().interrupt();
	            }
	        }
	        int data = buffer.poll();
	        notifyAll(); // Notify waiting producers that buffer has space
	        return data;
	    }
	}

	class Producer implements Runnable {
	    private final Buffer buffer;
	    private final Random random = new Random();

	    public Producer(Buffer buffer) {
	        this.buffer = buffer;
	    }

	    @Override
	    public void run() {
	        for (int i = 0; i < 50; i++) {
	            int randomNumber = random.nextInt(100) + 1;
	            buffer.produce(randomNumber);
	            System.out.println("Produced: " + randomNumber);
	        }
	    }
	}

	class Consumer implements Runnable {
	    private final Buffer buffer;
	    private final FileWriter fileWriter;

	    public Consumer(Buffer buffer, String filename) throws IOException {
	        this.buffer = buffer;
	        this.fileWriter = new FileWriter(filename, true); // Append mode
	    }

	    @Override
	    public void run() {
	        try {
	            for (int i = 0; i < 50; i++) {
	                int data = buffer.consume();
	                System.out.println("Consumed: " + data);
	                fileWriter.write(data + "\n");
	            }
	            fileWriter.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	}

	public class Monitor {
	    public static void main(String[] args) throws IOException {
	        Buffer buffer = new Buffer();
	        Thread[] producers = new Thread[5];
	        Thread[] consumers = new Thread[5];

	        for (int i = 0; i < 5; i++) {
	            producers[i] = new Thread(new Producer(buffer));
	            producers[i].start();
	        }

	        for (int i = 0; i < 5; i++) {
	            consumers[i] = new Thread(new Consumer(buffer, "C:\\Users\\bugda\\Downloads\\Numbers.txt"));
	            consumers[i].start();
	        }
	    }
	}